import pandas as pd
import numpy as np

input_file = 'D:\Input\Cigarette\Test Delhi\8. ANKA Insights-21_ Name_Test - Delhi-Mar-24_2024_01_04_11_31.xlsx'
input_sheet = 'Sheet1'
output_path = 'D:\Input\Python exp\Cltallerror_dlh.csv'

#Full excel import & sheet parsing
df_global = pd.read_excel(input_file,input_sheet)

control_dc = {'T_A2_1':['T_A1_1','T_D1_9'],'T_A2_2':['T_A1_2','T_D1_8']}
control_col = ['T_A2_1','T_A2_2']
name_col1 = {'T_A2_1':['ERROR 1A : LIKEBILITY OF BUYING BRAND TOTAL CIGARETTE WITHOUT FLAVOUR CAPSULE(T_A2_1) VS SUITABILITY OF BRAND TOTAL WITH NON CAPSULE CIGARETTE(T_A1_1) AND BRAND NAME FOR  CIGARETTE WITHOUT CAPSULE(T_D1_9)'],'T_A2_2':['ERROR 1B : LIKEBILITY OF BUYING BRAND TOTAL CIGARETTE WITH FLAVOUR CAPSULE(T_A2_2) VS SUITABILITY OF BRAND TOTAL WITH  CAPSULE CIGARETTE(T_A1_) AND BRAND NAME FOR  CIGARETTE WITH CAPSULE CIGARETTE(T_D1_8)']}

def iterating_func(control_dict,control_col,df_global,output):
    counter = 0
    for col in control_col:
        
        df = df_global.copy()
        for df_row in range(len(df)):
            if df.loc[df_row,col]==1 or df.loc[df_row,col]==2:
           
            
                if (df.loc[df_row,control_dict[col][0]]==1 or df.loc[df_row,control_dict[col][0]]==2 or df.loc[df_row,control_dict[col][0]]==3) and (df.loc[df_row,control_dict[col][1]]==1 or df.loc[df_row,control_dict[col][1]]==2 or df.loc[df_row,control_dict[col][1]]==3):
                #print('DF col',df_col)
                #print(df_col+num_of_unique_cols)
                    df.drop(df_row,inplace=True)
                    #print(df)
                else:
                    pass
            elif df.loc[df_row,col]==4 or df.loc[df_row,col]==5:
                if (df.loc[df_row,control_dict[col][0]]==3 or df.loc[df_row,control_dict[col][0]]==4 or df.loc[df_row,control_dict[col][0]]==5) and (df.loc[df_row,control_dict[col][1]]==3 or df.loc[df_row,control_dict[col][1]]==4 or df.loc[df_row,control_dict[col][1]]==5):
                #print('DF col',df_col)
                #print(df_col+num_of_unique_cols)
                    df.drop(df_row,inplace=True)
                    #print(df)
                else:
                     pass
            elif df.loc[df_row,col]==3 :
                if (df.loc[df_row,control_dict[col][0]]==2 or df.loc[df_row,control_dict[col][0]]==3 or df.loc[df_row,control_dict[col][0]]==4) and (df.loc[df_row,control_dict[col][1]]==2 or df.loc[df_row,control_dict[col][1]]==3 or df.loc[df_row,control_dict[col][1]]==4):
                #print('DF col',df_col)
                #print(df_col+num_of_unique_cols)
                    df.drop(df_row,inplace=True)
                    #print(df)
                
            else:
                df.drop(df_row,inplace=True)
        df_modified = df.loc[:,['Resp_Id','Interviewer',control_dict[col][1],control_dict[col][0],col]]
        
        Ax=pd.DataFrame(name_col1[col])
        print(Ax) 
        df_s = df_modified['Interviewer'].value_counts()
        df_modified1=pd.DataFrame(df_s)
        total_sum = df_modified1.sum()
        total_sum.name = 'Total'
        
        df_empty= pd.DataFrame()   
        
        if counter==0:
            Ax.to_csv(output, index=False, header=False) 
            
        else:
            df_empty.to_csv(output,mode='a', index=True)
            Ax.to_csv(output,mode='a', index=False, header=False) 

        df_modified1 = df_modified1._append(total_sum)
    
        df_empty= pd.DataFrame()   
    #empty dataframe

        
            
        
        df_modified.to_csv(output,mode='a', index=False)
            
        df_empty.to_csv(output,mode='a', index=True)
        df_modified1.to_csv(output, mode='a', index=True, header=False) 
        counter=counter+1
    
    return(df_modified)

final_df = iterating_func(control_dc,control_col,df_global,output_path)






#Full excel import & sheet parsing
df_global = pd.read_excel(input_file,input_sheet)
control_dc = {'T_B2_1':['T_B13_1'],'T_B2_2':['T_B13_2'],'T_B2_3':['T_B13_3'],'T_B2_4':['T_B13_4'],'T_B2_5':['T_B13_5'],'T_B2_6':['T_B13_6']}
control_col2 = ['T_B2_1','T_B2_2','T_B2_3','T_B2_4','T_B2_5','T_B2_6']
name_col2 = {'T_B2_1':['ERROR 2A : For TOTAL CRUIZE      - Overall liking(T_B2_1) vs feel about TOTAL CRUIZE      and regular brand name (T_B13_1)'],
             'T_B2_2':['ERROR 2B : For TOTAL KRAFT       - Overall liking(T_B2_2) vs feel about TOTAL KRAFT       and regular brand name (T_B13_2)'],
             'T_B2_3':['ERROR 2C : For TOTAL EDGE        - Overall liking(T_B2_3) vs feel about TOTAL EDGE        and regular brand name (T_B13_3)'],
             'T_B2_4':['ERROR 2D : For TOTAL JAZZ        - Overall liking(T_B2_4) vs feel about TOTAL JAZZ        and regular brand name (T_B13_4)'],
             'T_B2_5':['ERROR 2E : For TOTAL ICE FRUIT   - Overall liking(T_B2_5) vs feel about TOTAL ICE FRUIT   and regular brand name (T_B13_5)'],
             'T_B2_6':['ERROR 2F : For TOTAL TANGO       - Overall liking(T_B2_6) vs feel about TOTAL TANGO       and regular brand name (T_B13_6)']
             }
def iterating_func(control_dict,control_col2,df_global,output):
    
    for col in control_col2:
    
        df = df_global.copy()
        for df_row in range(len(df)):
            if df.loc[df_row,col]>=8 :
               
                
                if df.loc[df_row,control_dict[col][0]]>=4 :
                    #print('DF col',df_col)
                    #print(df_col+num_of_unique_cols)
                    df.drop(df_row,inplace=True)
                    print(df)
                else:
                    pass
            elif df.loc[df_row,col] in range(1,7):
                if df.loc[df_row,control_dict[col][0]] in range(1,4):
                    #print('DF col',df_col)
                    #print(df_col+num_of_unique_cols)
                    df.drop(df_row,inplace=True)
                    print(df)
                else:
                     pass
            elif df.loc[df_row,col]==7 :
                if df.loc[df_row,control_dict[col][0]] in range(2,5):
                    #print('DF col',df_col)
                    #print(df_col+num_of_unique_cols)
                    df.drop(df_row,inplace=True)
                    print(df)     
                    
            else:
                df.drop(df_row,inplace=True)
        df_modified = df.loc[:,['Resp_Id','Interviewer',col,control_dict[col][0]]]
        
        Ax=pd.DataFrame(name_col2[col])
        
        df_s = df_modified['Interviewer'].value_counts()
        df_modified1=pd.DataFrame(df_s)
        total_sum = df_modified1.sum()
        total_sum.name = 'Total'
        
        df_empty= pd.DataFrame()
        
        df_empty.to_csv(output,mode='a', index=True)
        Ax.to_csv(output,mode='a', index=False, header=False) 
    
        df_modified1 = df_modified1._append(total_sum)
        
        df_empty = pd.DataFrame()   
        #empty dataframe
    
    
        df_modified.to_csv(output,mode='a', index=False)
        df_empty.to_csv(output,mode='a', index=True)
        df_modified1.to_csv(output, mode='a', index=True, header=False) 
    
    return(df_modified1)

final_df = iterating_func(control_dc,control_col2,df_global,output_path)
















#Full excel import & sheet parsing
df_global = pd.read_excel(input_file,input_sheet)
control_dc = {'T_B2_1':['T_B14_1'],'T_B2_2':['T_B14_2'],'T_B2_3':['T_B14_3'],'T_B2_4':['T_B14_4'],'T_B2_5':['T_B14_5'],'T_B2_6':['T_B14_6']}
control_col3 = ['T_B2_1','T_B2_2','T_B2_3','T_B2_4','T_B2_5','T_B2_6']

name_col2 = {'T_B2_1':['ERROR 3A : For TOTAL CRUIZE      - Overall liking(T_B2_1) vs likeliness of buying TOTAL CRUIZE    if available in the market(T_B14_1)'],
             'T_B2_2':['ERROR 3B : For TOTAL KRAFT       - Overall liking(T_B2_2) vs likeliness of buying TOTAL KRAFT     if available in the market (T_B14_2)'],
             'T_B2_3':['ERROR 3C : For TOTAL EDGE        - Overall liking(T_B2_3) vs likeliness of buying TOTAL EDGE      if available in the market (T_B14_3)'],
             'T_B2_4':['ERROR 3D : For TOTAL JAZZ        - Overall liking(T_B2_4) vs likeliness of buying TOTAL JAZZ      if available in the market (T_B14_4)'],
             'T_B2_5':['ERROR 3E : For TOTAL ICE FRUIT   - Overall liking(T_B2_5) vs likeliness of buying TOTAL ICE FRUIT if available in the market (T_B14_5)'],
             'T_B2_6':['ERROR 3F : For TOTAL TANGO       - Overall liking(T_B2_6) vs likeliness of buying TOTAL TANGO     if available in the market (T_B14_6)']
             }

def iterating_func(control_dict,control_column,df,output):
    
    for col in control_column:
        df = df_global.copy()
        for df_row in range(len(df)):
            if df.loc[df_row,col]>=8 :
               
                
                if df.loc[df_row,control_dict[col][0]]>=4 :
                    #print('DF col',df_col)
                    #print(df_col+num_of_unique_cols)
                    df.drop(df_row,inplace=True)
                    print(df)
                else:
                    pass
            elif df.loc[df_row,col] in range(1,7):
                if df.loc[df_row,control_dict[col][0]] in range(1,4):
                    #print('DF col',df_col)
                    #print(df_col+num_of_unique_cols)
                    df.drop(df_row,inplace=True)
                    print(df)
                else:
                     pass
            
            elif df.loc[df_row,col]==7 :
                if df.loc[df_row,control_dict[col][0]] in range(2,5):
                    #print('DF col',df_col)
                    #print(df_col+num_of_unique_cols)
                    df.drop(df_row,inplace=True)
                    print(df)           
            else:
                df.drop(df_row,inplace=True)
        df_modified = df.loc[:,['Resp_Id','Interviewer',col,control_dict[col][0]]]
        
        Ax=pd.DataFrame(name_col2[col])
    
        df_s = df_modified['Interviewer'].value_counts()
        df_modified1=pd.DataFrame(df_s)
        total_sum = df_modified1.sum()
        total_sum.name = 'Total'
        
        df_empty= pd.DataFrame()
        
        df_empty.to_csv(output,mode='a', index=True)
        Ax.to_csv(output,mode='a', index=False, header=False) 
    
    
        df_modified1 = df_modified1._append(total_sum)
        
        df_empty = pd.DataFrame()   
        #empty dataframe
    
    
        df_modified.to_csv(output,mode='a', index=False)
        df_empty.to_csv(output,mode='a', index=True)
        df_modified1.to_csv(output, mode='a', index=True, header=False) 
    
    return(df_modified1)

final_df = iterating_func(control_dc,control_col3,df_global,output_path)





df = pd.read_excel(input_file,input_sheet)
intended_col = {'T_B2_1':['Resp_Id','Interviewer','T_B2_1','T_B5_1','T_B6_1','T_B7_1','T_B11_1'],
                'T_B2_2':['Resp_Id','Interviewer','T_B2_2','T_B5_2','T_B6_2','T_B7_2','T_B11_2'],
                'T_B2_3':['Resp_Id','Interviewer','T_B2_3','T_B5_3','T_B6_3','T_B7_3','T_B11_3'],
                'T_B2_4':['Resp_Id','Interviewer','T_B2_4','T_B5_4','T_B6_4','T_B7_4','T_B11_4'],
                'T_B2_5':['Resp_Id','Interviewer','T_B2_5','T_B5_5','T_B6_5','T_B7_5','T_B11_5' ],
                'T_B2_6':['Resp_Id','Interviewer','T_B2_6','T_B5_6','T_B6_6','T_B7_6','T_B11_6']
                }



control_dc = {'T_B2_1':['T_B5_1','T_B6_1','T_B7_1','T_B11_1'],'T_B2_2':['T_B5_2','T_B6_2','T_B7_2','T_B11_2'],'T_B2_3':['T_B5_3','T_B6_3','T_B7_3','T_B11_3'],'T_B2_4':['T_B5_4','T_B6_4','T_B7_4','T_B11_4'],'T_B2_5':['T_B5_5','T_B6_5','T_B7_5','T_B11_5'],'T_B2_6':['T_B5_6','T_B6_6','T_B7_6','T_B11_6']}
control_col4 = ['T_B2_1','T_B2_2','T_B2_3','T_B2_4','T_B2_5','T_B2_6']

name_col4 = {'T_B2_1':['ERROR 4A : For TOTAL CRUIZE      - B2(T_B2_1) vs B5(T_B5_1),B6(T_B6_1),B7(T_B7_1),B11(T_B11_1)'],
             'T_B2_2':['ERROR 4B : For TOTAL KRAFT       - B2(T_B2_2) vs B5(T_B5_2),B6(T_B6_2),B7(T_B7_2),B11(T_B11_2)'],
             'T_B2_3':['ERROR 4C : For TOTAL EDGE        - B2(T_B2_3) vs B5(T_B5_3),B6(T_B6_3),B7(T_B7_3),B11(T_B11_3)'],
             'T_B2_4':['ERROR 4D : For TOTAL JAZZ        - B2(T_B2_4) vs B5(T_B5_4),B6(T_B6_4),B7(T_B7_4),B11(T_B11_4)'],
             'T_B2_5':['ERROR 4E : For TOTAL ICE FRUIT   - B2(T_B2_5) vs B5(T_B5_5),B6(T_B6_5),B7(T_B7_5),B11(T_B11_5)'],
             'T_B2_6':['ERROR 4F : For TOTAL TANGO       - B2(T_B2_6) vs B5(T_B5_6),B6(T_B6_6),B7(T_B7_6),B11(T_B11_6)']
             }


#B2_1>=1 and B2_1<=6, atleast 3 column has 1 or 2(in 'T_B5_1','T_B6_1','T_B7_1','T_B11_1')
#B2_1>=8 and B2_1<=10, atleast 3 column has 4 or 5(in 'T_B5_1','T_B6_1','T_B7_1','T_B11_1')
#else drop


def iterating_func(control_dict,control_column,df_global,output):
    for col in control_column:
        df_global=df.copy()
        for row in range(len(df_global)):
            if df_global.loc[row,intended_col[col][2]]>=1 and df_global.loc[row,intended_col[col][2]]<=6:
                check_list = [(df_global.loc[row,intended_col[col][3]]>=1 and df_global.loc[row,intended_col[col][3]]<=2) , (df_global.loc[row,intended_col[col][4]]>=1 and df_global.loc[row,intended_col[col][4]]<=2) , (df_global.loc[row,intended_col[col][5]]>=1 and df_global.loc[row,intended_col[col][5]]<=2) , (df_global.loc[row,intended_col[col][6]]>=1 and df_global.loc[row,intended_col[col][6]]<=2)]
                if sum(check_list)>=3:
                    df_global.drop(row,inplace=True)
                else:
                    pass
            elif df_global.loc[row,intended_col[col][2]]>=8 and df_global.loc[row,intended_col[col][2]]<=10:
                check_list2 = [(df_global.loc[row,intended_col[col][3]]>=4 and df_global.loc[row,intended_col[col][3]]<=5) , (df_global.loc[row,intended_col[col][4]]>=4 and df_global.loc[row,intended_col[col][4]]<=5) , (df_global.loc[row,intended_col[col][5]]>=4 and df_global.loc[row,intended_col[col][5]]<=5) , (df_global.loc[row,intended_col[col][6]]>=4 and df_global.loc[row,intended_col[col][6]]<=5)]
                if sum(check_list2)>=3:
                    df_global.drop(row,inplace=True)
                else:
                    pass
            elif df_global.loc[row,intended_col[col][2]]==7:
                check_list3 = [(df_global.loc[row,intended_col[col][3]]>=2 and df_global.loc[row,intended_col[col][3]]<=4) , (df_global.loc[row,intended_col[col][4]]>=2 and df_global.loc[row,intended_col[col][4]]<=4) , (df_global.loc[row,intended_col[col][5]]>=2 and df_global.loc[row,intended_col[col][5]]<=4) , (df_global.loc[row,intended_col[col][6]]>=2 and df_global.loc[row,intended_col[col][6]]<=4)]
                if sum(check_list3)>=3:
                    df_global.drop(row,inplace=True)
                else:
                    pass 
                
            else:
                df_global.drop(row,inplace=True)
        df_modified = df_global.loc[:,[intended_col[col][0],intended_col[col][1],intended_col[col][2],intended_col[col][3],intended_col[col][4],intended_col[col][5],intended_col[col][6]]]
        Ax=pd.DataFrame(name_col4[col])                            
                                    
        df_s = df_modified['Interviewer'].value_counts()
        df_modified1=pd.DataFrame(df_s)
        total_sum = df_modified1.sum()
        total_sum.name = 'Total'
        df_modified1 = df_modified1._append(total_sum)
          
        df_empty = pd.DataFrame()   
         #empty dataframe
        
        df_empty.to_csv(output,mode='a', index=True)
        Ax.to_csv(output,mode='a', index=False, header=False) 
        
        
        df_modified.to_csv(output_path,mode='a', index=False)
        df_empty.to_csv(output_path,mode='a', index=True)
        df_modified1.to_csv(output_path, mode='a', index=True, header=False) 
        
    return(df_modified1)  
        
final_df = iterating_func(control_dc,control_col4,df,output_path)        
        

























# Error 5

df= pd.read_excel(input_file,input_sheet)

intended_col = {'T_B2_1':['Resp_Id','Interviewer','T_B2_1','TOTAL CRUIZE_T_B17_1','TOTAL CRUIZE_T_B17_2','TOTAL CRUIZE_T_B17_3','TOTAL CRUIZE_T_B17_4','TOTAL CRUIZE_T_B17_5','TOTAL CRUIZE_T_B17_6','TOTAL CRUIZE_T_B17_7','TOTAL CRUIZE_T_B17_8','TOTAL CRUIZE_T_B17_9'],
                'T_B2_2':['Resp_Id','Interviewer','T_B2_2','TOTAL KRAFT_T_B17_1','TOTAL KRAFT_T_B17_2','TOTAL KRAFT_T_B17_3','TOTAL KRAFT_T_B17_4','TOTAL KRAFT_T_B17_5','TOTAL KRAFT_T_B17_6','TOTAL KRAFT_T_B17_7','TOTAL KRAFT_T_B17_8','TOTAL KRAFT_T_B17_9'],
                'T_B2_3':['Resp_Id','Interviewer','T_B2_3','TOTAL EDGE_T_B17_1','TOTAL EDGE_T_B17_2','TOTAL EDGE_T_B17_3','TOTAL EDGE_T_B17_4','TOTAL EDGE_T_B17_5','TOTAL EDGE_T_B17_6','TOTAL EDGE_T_B17_7','TOTAL EDGE_T_B17_8','TOTAL EDGE_T_B17_9'],
                'T_B2_4':['Resp_Id','Interviewer','T_B2_4','TOTAL JAZZ_T_B17_1','TOTAL JAZZ_T_B17_2','TOTAL JAZZ_T_B17_3','TOTAL JAZZ_T_B17_4','TOTAL JAZZ_T_B17_5','TOTAL JAZZ_T_B17_6','TOTAL JAZZ_T_B17_7','TOTAL JAZZ_T_B17_8','TOTAL JAZZ_T_B17_9'],
                'T_B2_5':['Resp_Id','Interviewer','T_B2_5','TOTAL ICE FRUIT_T_B17_1','TOTAL ICE FRUIT_T_B17_2','TOTAL ICE FRUIT_T_B17_3','TOTAL ICE FRUIT_T_B17_4','TOTAL ICE FRUIT_T_B17_5','TOTAL ICE FRUIT_T_B17_6','TOTAL ICE FRUIT_T_B17_7','TOTAL ICE FRUIT_T_B17_8','TOTAL ICE FRUIT_T_B17_9'],
                'T_B2_6':['Resp_Id','Interviewer','T_B2_6','TOTAL TANGO_T_B17_1','TOTAL TANGO_T_B17_2','TOTAL TANGO_T_B17_3','TOTAL TANGO_T_B17_4','TOTAL TANGO_T_B17_5','TOTAL TANGO_T_B17_6','TOTAL TANGO_T_B17_7','TOTAL TANGO_T_B17_8','TOTAL TANGO_T_B17_9']
                }



control_dc = {'T_B2_1':['TOTAL CRUIZE_T_B17_1','TOTAL CRUIZE_T_B17_2','TOTAL CRUIZE_T_B17_3','TOTAL CRUIZE_T_B17_4','TOTAL CRUIZE_T_B17_5','TOTAL CRUIZE_T_B17_6','TOTAL CRUIZE_T_B17_7','TOTAL CRUIZE_T_B17_8','TOTAL CRUIZE_T_B17_9'],'T_B2_2':['TOTAL KRAFT_T_B17_1','TOTAL KRAFT_T_B17_2','TOTAL KRAFT_T_B17_3','TOTAL KRAFT_T_B17_4','TOTAL KRAFT_T_B17_5','TOTAL KRAFT_T_B17_6','TOTAL KRAFT_T_B17_7','TOTAL KRAFT_T_B17_8','TOTAL KRAFT_T_B17_9'],'T_B2_3':['TOTAL EDGE_T_B17_1','TOTAL EDGE_T_B17_2','TOTAL EDGE_T_B17_3','TOTAL EDGE_T_B17_4','TOTAL EDGE_T_B17_5','TOTAL EDGE_T_B17_6','TOTAL EDGE_T_B17_7','TOTAL EDGE_T_B17_8','TOTAL EDGE_T_B17_9'],'T_B2_4':['TOTAL JAZZ_T_B17_1','TOTAL JAZZ_T_B17_2','TOTAL JAZZ_T_B17_3','TOTAL JAZZ_T_B17_4','TOTAL JAZZ_T_B17_5','TOTAL JAZZ_T_B17_6','TOTAL JAZZ_T_B17_7','TOTAL JAZZ_T_B17_8','TOTAL JAZZ_T_B17_9'],'T_B2_5':['TOTAL ICE FRUIT_T_B17_1','TOTAL ICE FRUIT_T_B17_2','TOTAL ICE FRUIT_T_B17_3','TOTAL ICE FRUIT_T_B17_4','TOTAL ICE FRUIT_T_B17_5','TOTAL ICE FRUIT_T_B17_6','TOTAL ICE FRUIT_T_B17_7','TOTAL ICE FRUIT_T_B17_8','TOTAL ICE FRUIT_T_B17_9'],'T_B2_6':['TOTAL TANGO_T_B17_1','TOTAL TANGO_T_B17_2','TOTAL TANGO_T_B17_3','TOTAL TANGO_T_B17_4','TOTAL TANGO_T_B17_5','TOTAL TANGO_T_B17_6','TOTAL TANGO_T_B17_7','TOTAL TANGO_T_B17_8','TOTAL TANGO_T_B17_9']}



control_col = ['T_B2_1','T_B2_2','T_B2_3','T_B2_4','T_B2_5','T_B2_6']




name_col4 = {'T_B2_1':['ERROR 5A : For TOTAL CRUIZE      - B2(T_B2_1) vs B17'],
             'T_B2_2':['ERROR 5B : For TOTAL KRAFT       - B2(T_B2_2) vs B17'],
             'T_B2_3':['ERROR 5C : For TOTAL EDGE        - B2(T_B2_3) vs B17'],
             'T_B2_4':['ERROR 5D : For TOTAL JAZZ        - B2(T_B2_4) vs B17'],
             'T_B2_5':['ERROR 5E : For TOTAL ICE FRUIT   - B2(T_B2_5) vs B17'],
             'T_B2_6':['ERROR 5F : For TOTAL TANGO       - B2(T_B2_6) vs B17']
             }





#B2_1>=1 and B2_1<=6, atleast 3 column has 1 or 2(in 'T_B6_1','T_B7_1','T_B8_1','T_B11_1')
#B2_1>=8 and B2_1<=10, atleast 3 column has 4 or 5(in 'T_B6_1','T_B7_1','T_B8_1','T_B11_1')
#else drop


def iterating_func(control_dict,control_column,df_global,output):
    for col in control_column:
        df_global=df.copy()

        for row in range(len(df_global)):
            if df_global.loc[row,intended_col[col][2]]>=1 and df_global.loc[row,intended_col[col][2]]<=6:
                check_list = [(df_global.loc[row,intended_col[col][3]]>=1 and df_global.loc[row,intended_col[col][3]]<=2) , (df_global.loc[row,intended_col[col][4]]>=1 and df_global.loc[row,intended_col[col][4]]<=2) , (df_global.loc[row,intended_col[col][5]]>=1 and df_global.loc[row,intended_col[col][5]]<=2) , (df_global.loc[row,intended_col[col][6]]>=1 and df_global.loc[row,intended_col[col][6]]<=2),(df_global.loc[row,intended_col[col][7]]>=1 and df_global.loc[row,intended_col[col][7]]<=2),(df_global.loc[row,intended_col[col][8]]>=1 and df_global.loc[row,intended_col[col][8]]<=2),(df_global.loc[row,intended_col[col][9]]>=1 and df_global.loc[row,intended_col[col][9]]<=2),(df_global.loc[row,intended_col[col][10]]>=1 and df_global.loc[row,intended_col[col][10]]<=2),(df_global.loc[row,intended_col[col][11]]>=1 and df_global.loc[row,intended_col[col][11]]<=2)]
                if sum(check_list)>=6:
                    df_global.drop(row,inplace=True)
                else:
                    pass
            elif df_global.loc[row,intended_col[col][2]]>=8 and df_global.loc[row,intended_col[col][2]]<=10:
                check_list2 = [(df_global.loc[row,intended_col[col][3]]>=4 and df_global.loc[row,intended_col[col][3]]<=5) , (df_global.loc[row,intended_col[col][4]]>=4 and df_global.loc[row,intended_col[col][4]]<=5) , (df_global.loc[row,intended_col[col][5]]>=4 and df_global.loc[row,intended_col[col][5]]<=5) , (df_global.loc[row,intended_col[col][6]]>=4 and df_global.loc[row,intended_col[col][6]]<=5),(df_global.loc[row,intended_col[col][7]]>=4 and df_global.loc[row,intended_col[col][7]]<=5),(df_global.loc[row,intended_col[col][8]]>=4 and df_global.loc[row,intended_col[col][8]]<=5),(df_global.loc[row,intended_col[col][9]]>=4 and df_global.loc[row,intended_col[col][9]]<=5),(df_global.loc[row,intended_col[col][10]]>=4 and df_global.loc[row,intended_col[col][10]]<=5),(df_global.loc[row,intended_col[col][11]]>=4 and df_global.loc[row,intended_col[col][11]]<=5)]
                if sum(check_list2)>=6:
                    df_global.drop(row,inplace=True)
                else:
                    pass
            elif df_global.loc[row,intended_col[col][2]]==7:
                check_list2 = [(df_global.loc[row,intended_col[col][3]]>=2 and df_global.loc[row,intended_col[col][3]]<=4) , (df_global.loc[row,intended_col[col][4]]>=2 and df_global.loc[row,intended_col[col][4]]<=4) , (df_global.loc[row,intended_col[col][5]]>=2 and df_global.loc[row,intended_col[col][5]]<=4) , (df_global.loc[row,intended_col[col][6]]>=2 and df_global.loc[row,intended_col[col][6]]<=4)]
                if sum(check_list2)>=3:
                    df_global.drop(row,inplace=True)
                else:
                    pass     
            else:
                df_global.drop(row,inplace=True)
        
        df_modified = df_global.loc[:,[intended_col[col][0],intended_col[col][1],intended_col[col][2],intended_col[col][3],intended_col[col][4],intended_col[col][5],intended_col[col][6],intended_col[col][7],intended_col[col][8],intended_col[col][9],intended_col[col][10],intended_col[col][11]]]
        Ax=pd.DataFrame(name_col4[col])                            
        
        
        df_s = df_global['Interviewer'].value_counts()
        df_modified1=pd.DataFrame(df_s)
        total_sum = df_modified1.sum()
        total_sum.name = 'Total'
        df_modified1 = df_modified1._append(total_sum)
         
        df_empty = pd.DataFrame()   
         #empty dataframe
        
        df_empty.to_csv(output,mode='a', index=True)
        Ax.to_csv(output,mode='a', index=False, header=False) 
        
        
        
        df_modified.to_csv(output_path,mode='a', index=False)
        df_empty.to_csv(output_path,mode='a', index=True)
        df_modified1.to_csv(output_path, mode='a', index=True, header=False) 
    return(df_modified1)     

final_df = iterating_func(control_dc,control_col4,df,output_path)     







# Error 6


#Full excel import & sheet parsing
df_global = pd.read_excel(input_file,input_sheet)
intended_col = ['Resp_Id','Interviewer','T_B2_1','T_B2_2','T_B2_3','T_B2_4','T_B2_5','T_B2_6','T_B19_1','T_B19_2','T_B19_3']
df_global = df_global[intended_col]

Error = ['ERROR 6 : Comparison between overall ranking(B2) and brand preference(Q B19)']

for row in range(len(df_global)):
    if df_global.loc[row,intended_col[8]]==1 and df_global.loc[row,intended_col[9]]==2 :
        if df_global.loc[row,intended_col[2]]>=df_global.loc[row,intended_col[3]] and df_global.loc[row,intended_col[3]]>=df_global.loc[row,intended_col[4]]:
            df_global.drop(row,inplace=True)
        else:
            pass
    elif df_global.loc[row,intended_col[8]]==1 and df_global.loc[row,intended_col[10]]==2 :
        if df_global.loc[row,intended_col[2]]>=df_global.loc[row,intended_col[4]] and df_global.loc[row,intended_col[4]]>=df_global.loc[row,intended_col[3]]:
            df_global.drop(row,inplace=True)
        else:
            pass
    elif df_global.loc[row,intended_col[9]]==1 and df_global.loc[row,intended_col[10]]==2 :
        if df_global.loc[row,intended_col[3]]>=df_global.loc[row,intended_col[4]] and df_global.loc[row,intended_col[4]]>=df_global.loc[row,intended_col[2]]:
            df_global.drop(row,inplace=True)
        else:
            pass
    elif df_global.loc[row,intended_col[9]]==1 and df_global.loc[row,intended_col[8]]==2 :
        if df_global.loc[row,intended_col[3]]>=df_global.loc[row,intended_col[2]] and df_global.loc[row,intended_col[2]]>=df_global.loc[row,intended_col[4]]:
            df_global.drop(row,inplace=True)
        else:
            pass
    elif df_global.loc[row,intended_col[10]]==1 and df_global.loc[row,intended_col[9]]==2 :
        if df_global.loc[row,intended_col[4]]>=df_global.loc[row,intended_col[3]] and df_global.loc[row,intended_col[3]]>=df_global.loc[row,intended_col[2]]:
            df_global.drop(row,inplace=True)
        else:
            pass
    elif df_global.loc[row,intended_col[10]]==1 and df_global.loc[row,intended_col[8]]==2 :
        if df_global.loc[row,intended_col[4]]>=df_global.loc[row,intended_col[2]] and df_global.loc[row,intended_col[2]]>=df_global.loc[row,intended_col[3]]:
            df_global.drop(row,inplace=True)
        else:
            pass 
        
    elif df_global.loc[row,intended_col[8]]==4 and df_global.loc[row,intended_col[9]]==5 :
        if df_global.loc[row,intended_col[5]]>=df_global.loc[row,intended_col[6]] and df_global.loc[row,intended_col[6]]>=df_global.loc[row,intended_col[7]]:
            df_global.drop(row,inplace=True)
        else:
            pass
    elif df_global.loc[row,intended_col[8]]==4 and df_global.loc[row,intended_col[10]]==5 :
        if df_global.loc[row,intended_col[5]]>=df_global.loc[row,intended_col[7]] and df_global.loc[row,intended_col[7]]>=df_global.loc[row,intended_col[6]]:
            df_global.drop(row,inplace=True)
        else:
            pass
    elif df_global.loc[row,intended_col[9]]==4 and df_global.loc[row,intended_col[10]]==5 :
        if df_global.loc[row,intended_col[6]]>=df_global.loc[row,intended_col[7]] and df_global.loc[row,intended_col[7]]>=df_global.loc[row,intended_col[5]]:
            df_global.drop(row,inplace=True)
        else:
            pass
    elif df_global.loc[row,intended_col[9]]==4 and df_global.loc[row,intended_col[8]]==5 :
        if df_global.loc[row,intended_col[6]]>=df_global.loc[row,intended_col[5]] and df_global.loc[row,intended_col[5]]>=df_global.loc[row,intended_col[7]]:
            df_global.drop(row,inplace=True)
        else:
            pass
    elif df_global.loc[row,intended_col[10]]==4 and df_global.loc[row,intended_col[9]]==5 :
        if df_global.loc[row,intended_col[7]]>=df_global.loc[row,intended_col[6]] and df_global.loc[row,intended_col[6]]>=df_global.loc[row,intended_col[5]]:
            df_global.drop(row,inplace=True)
        else:
            pass
    elif df_global.loc[row,intended_col[10]]==4 and df_global.loc[row,intended_col[8]]==5 :
        if df_global.loc[row,intended_col[7]]>=df_global.loc[row,intended_col[5]] and df_global.loc[row,intended_col[5]]>=df_global.loc[row,intended_col[6]]:
            df_global.drop(row,inplace=True)
        else:
            pass    
    else:
        df_global.drop(row,inplace=True)

df_s = df_global['Interviewer'].value_counts()
df_modified1=pd.DataFrame(df_s)
total_sum = df_modified1.sum()
total_sum.name = 'Total'
df_modified1 = df_modified1._append(total_sum)
 
df_empty = pd.DataFrame()   
 #empty dataframe
 
 
df_empty.to_csv(output_path,mode='a', index=True)
Ax=pd.DataFrame(Error)
Ax.to_csv(output_path,mode='a', index=False, header=False) 
 
 

df_global.to_csv(output_path,mode='a', index=False)
df_empty.to_csv(output_path,mode='a', index=True)
df_modified1.to_csv(output_path, mode='a', index=True, header=False) 
 
        
